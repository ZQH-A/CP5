1.静态内存用来保存局部static对象、类static数据成员以及定义在任何函数之外的变量。栈内存用来保存定义在
  函数内的非static对象。分配在静态或栈内存的对象由编译器自动创建和销毁。对于栈对象，仅在其定义大的程序块运行时才存在，
  static对象在使用之前分配，在程序结束时销毁。程序用堆来存储动态分配的对象（即在程序运行时分配的对象）。
  
2.new 在动态内存中为对象分配空间并返回一个指向该对象的指针; delete 接受一个动态对象的指针，销毁该对象，并释放与之关联的内存。
  两种智能指针（自动释放所指向的对象）：shared_ptr 允许多个指针指向同一个对象;unique_ptr “独占”所指向的对象。  智能指针也是模板。

3.shared_ptr：最安全的分配和使用动态内存的方法时调用一个名为make_shared的标准库函数。此函数在动态内存中分配一个对象并初始化它，
  返回指向此对象的shared_ptr。可以认为每个shared_ptr都有一个关联的计数器，当一个shared_ptr的计数器变为0,会自动释放管理的对象。
  拷贝一个shared_ptr、作为参数传递给函数、作为函数的返回值时计数器会递增，给shared_ptr赋予一个新值、或shared_ptr被销毁时计数器递减

4.unique_ptr：某个时刻只能有一个unique_ptr指向一个给定的对象。

智能指针陷阱：
    不使用相同的内置指针值初始化（或reset）多个智能指针
    不delete get（）返回的指针
    不使用get（）初始化或reset另一个智能指针。
    如果你使用get（）返回的指针，记住当最后一个对应的智能指针销毁后，指针就变为无效的。
