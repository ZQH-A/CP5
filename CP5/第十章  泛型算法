1.大多数算法都定义在头文件algorithm中
2.find（）将范围内的每个元素与给定值进行比较，参数是表示范围的两个迭代器和一个要查找的值。
3.count（）查找范围内元素出现的个数，参数是表示范围的两个迭代器和一个要查找的值
4.accumulate（）计算范围内所有值的和，参数是表示范围的两个迭代器和一个和的初值
5.equal（）用于确定两个序列是否保存相同的值，参数是三个迭代器，前两个迭代器表示一个序列的范围，第三个迭代器表示一个序列的初值，第二个序列元素的数目至少与第一个序列一样长。
6.fill_n()将给定值赋予迭代器开始后指定个数的元素，参数是一个迭代器，一个计数值，一个值（将迭代器后n个元素的值赋值为给定的值），不能在一个空容器调用它。
7.copy（）将一个序列中的值拷贝到第二个序列中，参数是三个迭代器，前两个迭代器表示一个序列的范围，第三个迭代器表示一个序列的起始位置，第二个序列元素的数目至少与第一个序列一样长。
8.replace（）将一个序列中所有给定的值改为另一个值，参数前两个是迭代器，后两个一个是要搜索的值，另一个使新值。
  replace（，，x,y）将序列中值为x改为y。
  replace_copy()将改变后的值存入另一个容器中。
9.unique（）消除重复的项。参数是两个表示范围的迭代器
10.lambda表达式：表示一个可调用对象。具有返回类型、一个参数列表、一个函数体。可以忽略参数列表和返回类型，但必须包含捕获列表和函数体。可以将在lambda表达式中需要的变量包含在捕获列表中，就可以在lambda中使用这些变量。捕获有值捕获（=）和引用捕获（&）。
11.find_if()参数为两个迭代器和一个可调用的对象，将迭代器范围内的元素依次调用可调用对象，返回第一个满足可调用对象的迭代器。
12.for_each()接收一个可调用对象，并对输入序列中每个元素调用此对象。
13.插入迭代器：绑定到一个容器上，可用来向容器中插入元素 
   back_inserter 创建一个使用push_back的迭代器
   front_inserter 创建一个使用push_front的迭代器
14.流迭代器：绑定到输入或输出流上，可用来遍历所关联的IO流
   istream_iterator读取输入流
   ostream_iterator读取输入流
   反向迭代器：向后移动

   
